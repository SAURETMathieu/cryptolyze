-- Deploy cryptolize:004_init_mpd to pg

BEGIN;

--------------------------------------------------------
-- Create wallet table
--------------------------------------------------------
CREATE TYPE "public"."wallet_type" AS ENUM ('centralized', 'decentralized');

CREATE TABLE public.wallet (
    "id" integer generated by default as identity not null,
    "address" TEXT,
    "blockchain" TEXT NOT NULL DEFAULT 'All',
    "exchange" TEXT,
    "name" TEXT NOT NULL,
    "type" wallet_type NOT NULL,
    "sync_at" timestamp
    with
        time zone null,
        "created_at" timestamp
    with
        time zone not null default now(),
        "updated_at" timestamp
    with
        time zone null,
        "profile_id" uuid not null default auth.uid (),
        CONSTRAINT "wallet_pkey" PRIMARY KEY ("id"),
        CONSTRAINT "wallet_profile_id_fkey" FOREIGN KEY ("profile_id") REFERENCES "profiles" ("id")
);

create index IF not exists idx_wallet_profile_id on public.wallet using btree (profile_id) TABLESPACE pg_default;

create index IF not exists idx_wallet_address on public.wallet using btree (address) TABLESPACE pg_default;

ALTER TABLE public.wallet ENABLE ROW LEVEL SECURITY;

CREATE OR REPLACE TRIGGER "handle_wallet_updated_at" BEFORE UPDATE ON "public"."wallet" FOR EACH ROW EXECUTE FUNCTION "extensions"."moddatetime"('updated_at');

--------------------------------------------------------
-- Create crypto table
--------------------------------------------------------
CREATE TABLE public.crypto (
    "id" integer generated by default as identity not null,
    "symbol" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "digit" INTEGER NOT NULL,
    "logo_url" TEXT NOT NULL,
    "first_year" INTEGER,
    "currency" TEXT NOT NULL DEFAULT 'USDT',
    "created_at" timestamp
    with
        time zone not null default now(),
        "updated_at" timestamp
    with
        time zone null,
        CONSTRAINT "crypto_pkey" PRIMARY KEY ("id")
);

ALTER TABLE public.crypto ENABLE ROW LEVEL SECURITY;

CREATE OR REPLACE TRIGGER "handle_crypto_updated_at" BEFORE UPDATE ON "public"."crypto" FOR EACH ROW EXECUTE FUNCTION "extensions"."moddatetime"('updated_at');

--------------------------------------------------------
-- Create crypto_day_history table
--------------------------------------------------------
CREATE TABLE public.crypto_day_history (
    "id" integer generated by default as identity not null,
    "crypto_id" INTEGER NOT NULL,
    "date" date NOT NULL,
    "prices_per_minute" numeric[] null,
    "min_price" numeric NOT NULL DEFAULT 0,
    "max_price" numeric NOT NULL DEFAULT 0,
    "average_price" numeric NOT NULL DEFAULT 0,
    "open_price" numeric NOT NULL DEFAULT 0,
    "close_price" numeric NOT NULL DEFAULT 0,
    "volume" numeric NOT NULL DEFAULT 0,
    CONSTRAINT "crypto_day_history_pkey" PRIMARY KEY ("id"),
    CONSTRAINT "crypto_day_history_crypto_id_fkey" FOREIGN KEY ("crypto_id") REFERENCES "public"."crypto"("id"),
    CONSTRAINT "unique_crypto_day_history_date_crypto_id" UNIQUE ("date", "crypto_id"),
    CONSTRAINT "crypto_day_history_min_price_check" CHECK ("min_price" <= "max_price")
);

ALTER TABLE public.crypto_day_history ENABLE ROW LEVEL SECURITY;

CREATE INDEX IF NOT EXISTS idx_crypto_day_history_crypto_id ON public.crypto_day_history USING btree (crypto_id);

--------------------------------------------------------
-- Create wallet_cryptos table
--------------------------------------------------------
CREATE TABLE public.wallet_cryptos (
    "wallet_id" INTEGER NOT NULL,
    "crypto_id" INTEGER NOT NULL,
    "nb_token" numeric NOT NULL,
    "price" numeric,
    "price24h" numeric,
    "percent" NUMERIC(10, 4),
    "updated_at" timestamp with time zone null,
    CONSTRAINT "wallet_cryptos_pkey" PRIMARY KEY ("wallet_id","crypto_id"),
    CONSTRAINT "wallet_cryptos_wallet_id_fkey" FOREIGN KEY ("wallet_id") REFERENCES "public"."wallet"("id"),
    CONSTRAINT "wallet_cryptos_crypto_id_fkey" FOREIGN KEY ("crypto_id") REFERENCES "public"."crypto"("id")
);

ALTER TABLE public.wallet_cryptos ENABLE ROW LEVEL SECURITY;

CREATE INDEX IF NOT EXISTS idx_wallet_cryptos_wallet_id ON public.wallet_cryptos USING btree (wallet_id);

CREATE INDEX IF NOT EXISTS idx_wallet_cryptos_crypto_id ON public.wallet_cryptos USING btree (crypto_id);

CREATE OR REPLACE TRIGGER "handle_wallet_cryptos_updated_at" BEFORE UPDATE ON "public"."wallet_cryptos" FOR EACH ROW EXECUTE FUNCTION "extensions"."moddatetime"('updated_at');

--------------------------------------------------------
-- Create balance table
--------------------------------------------------------
CREATE TABLE public.balance_history (
    "id" integer generated by default as identity not null,
    "nb_token" numeric NOT NULL,
    "price" numeric,
    "price24h" numeric,
    "timestamp" timestamp with time zone NOT NULL DEFAULT now(),
    "percent" numeric,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone null,
    "wallet_id" INTEGER NOT NULL,
    "crypto_id" INTEGER NOT NULL,
    CONSTRAINT "balance_history_pkey" PRIMARY KEY ("id"),
    CONSTRAINT "balance_history_wallet_id_fkey" FOREIGN KEY ("wallet_id") REFERENCES "public"."wallet"("id"),
    CONSTRAINT "balance_history_crypto_id_fkey" FOREIGN KEY ("crypto_id") REFERENCES "public"."crypto"("id")
);

ALTER TABLE public.balance_history ENABLE ROW LEVEL SECURITY;

CREATE INDEX IF NOT EXISTS idx_balance_history_wallet_id ON public.balance_history USING btree (wallet_id);

CREATE INDEX IF NOT EXISTS idx_balance_history_crypto_id ON public.balance_history USING btree (crypto_id);

CREATE OR REPLACE TRIGGER "handle_balance_history_updated_at" BEFORE UPDATE ON "public"."balance_history" FOR EACH ROW EXECUTE FUNCTION "extensions"."moddatetime"('updated_at');

--------------------------------------------------------
-- Create api_key table
--------------------------------------------------------
CREATE TABLE public.api_key (
    "id" integer generated by default as identity not null,
    "key" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "write" boolean not null,
    "read" boolean not null,
    "expired_at" timestamp with time zone not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone null,
    "wallet_id" INTEGER NOT NULL,
    CONSTRAINT "api_key_pkey" PRIMARY KEY ("id"),
    CONSTRAINT "api_key_wallet_id_fkey" FOREIGN KEY ("wallet_id") REFERENCES "public"."wallet"("id")
);

ALTER TABLE public.api_key ENABLE ROW LEVEL SECURITY;

CREATE INDEX IF NOT EXISTS idx_api_key_wallet_id ON public.api_key USING btree (wallet_id);

CREATE OR REPLACE TRIGGER "handle_api_key_updated_at" BEFORE UPDATE ON "public"."api_key" FOR EACH ROW EXECUTE FUNCTION "extensions"."moddatetime"('updated_at');

--------------------------------------------------------
-- Create strategy table
--------------------------------------------------------
CREATE TABLE public.strategy (
    "id" integer generated by default as identity not null,
    "name" TEXT NOT NULL,
    "description" TEXT NOT NULL DEFAULT 'No description',
    "execution_delay" integer not null default 60, -- in seconds
    "percent_per_trade_up" numeric not null default 1, -- in percentage
    "percent_per_trade_down" numeric not null default 1, -- in percentage
    "multiplier" numeric not null default 1,
    "starting_multiplier" numeric not null default 1,
    "created_at" timestamp
    with
        time zone not null default now(),
        "updated_at" timestamp
    with
        time zone null,
        CONSTRAINT "strategy_pkey" PRIMARY KEY ("id")
);

ALTER TABLE public.strategy ENABLE ROW LEVEL SECURITY;

CREATE OR REPLACE TRIGGER "handle_strategy_updated_at" BEFORE UPDATE ON "public"."strategy" FOR EACH ROW EXECUTE FUNCTION "extensions"."moddatetime"('updated_at');

--------------------------------------------------------
-- Create strategy_test table
--------------------------------------------------------
CREATE TABLE public.strategy_test (
    "id" integer generated by default as identity not null,
    "year" INTEGER NOT NULL,
    "starting_price" numeric NOT NULL,
    "ending_price" numeric NOT NULL,
    "average_price" numeric NOT NULL,
    "percent" numeric NOT NULL,
    "max_trade_open" INTEGER NOT NULL DEFAULT 0,
    "average_trade_open" INTEGER NOT NULL DEFAULT 0,
    "max_invest" numeric NOT NULL,
    "nb_token" numeric NOT NULL,
    "fees" numeric NOT NULL,
    "nb_trade_closed" INTEGER NOT NULL,
    "nb_trade_open" INTEGER NOT NULL,
    "profit" numeric NOT NULL,
    "profit_percent" numeric NOT NULL,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone null,
    "strategy_id" INTEGER NOT NULL,
    "crypto_id" INTEGER NOT NULL,
    CONSTRAINT "strategy_test_pkey" PRIMARY KEY ("id"),
    CONSTRAINT "unique_strategy_test_year_crypto_id" UNIQUE ("year", "crypto_id"),
    CONSTRAINT "strategy_test_strategy_id_fkey" FOREIGN KEY ("strategy_id") REFERENCES "public"."strategy"("id"),
    CONSTRAINT "strategy_test_crypto_id_fkey" FOREIGN KEY ("crypto_id") REFERENCES "public"."crypto"("id")
);

ALTER TABLE public.strategy_test ENABLE ROW LEVEL SECURITY;

CREATE INDEX IF NOT EXISTS idx_strategy_test_strategy_id ON public.strategy_test USING btree (strategy_id);

CREATE INDEX IF NOT EXISTS idx_strategy_test_crypto_id ON public.strategy_test USING btree (crypto_id);

CREATE OR REPLACE TRIGGER "handle_strategy_test_updated_at" BEFORE UPDATE ON "public"."strategy_test" FOR EACH ROW EXECUTE FUNCTION "extensions"."moddatetime"('updated_at');

--------------------------------------------------------
-- Create strategy_test_history table
--------------------------------------------------------
CREATE TABLE public.strategy_test_history (
    "strategy_test_id" integer NOT NULL REFERENCES strategy_test (id),
    "date" date NOT NULL,
    "nb_token" numeric NOT NULL,
    "max_trade_open" INTEGER NOT NULL DEFAULT 0,
    "average_trade_open" INTEGER NOT NULL DEFAULT 0,
    "average_price" numeric NOT NULL,
    "max_invest" numeric NOT NULL,
    "nb_trade_closed" INTEGER NOT NULL,
    "nb_trade_open" INTEGER NOT NULL,
    "profit" numeric NOT NULL,
    "profit_percent" numeric NOT NULL,
    CONSTRAINT "strategy_test_history_pkey" PRIMARY KEY ("strategy_test_id", "date")
);

ALTER TABLE public.strategy_test_history ENABLE ROW LEVEL SECURITY;

CREATE INDEX IF NOT EXISTS idx_strategy_test_history_strategy_test_id ON public.strategy_test_history USING btree (strategy_test_id);

--------------------------------------------------------
-- Create bot table
--------------------------------------------------------
CREATE TYPE "public"."bot_status" AS ENUM ('running', 'stopped', 'paused', 'error', 'awaiting_start');

CREATE TABLE public.bot (
    "id" integer generated by default as identity not null,
    "name" TEXT NOT NULL,
    "status" bot_status NOT NULL DEFAULT 'awaiting_start',
    "starting_balance" numeric NOT NULL,
    "ending_balance" numeric NOT NULL,
    "max_trade_open" INTEGER NOT NULL DEFAULT 0,
    "max_invest" numeric NOT NULL,
    "api_key_id" INTEGER NOT NULL,
    "crypto_id" INTEGER NOT NULL,
    "strategy_id" INTEGER NOT NULL,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone null,
    CONSTRAINT "bot_pkey" PRIMARY KEY ("id"),
    CONSTRAINT "bot_api_key_id_fkey" FOREIGN KEY ("api_key_id") REFERENCES "public"."api_key"("id"),
    CONSTRAINT "bot_crypto_id_fkey" FOREIGN KEY ("crypto_id") REFERENCES "public"."crypto"("id"),
    CONSTRAINT "bot_strategy_id_fkey" FOREIGN KEY ("strategy_id") REFERENCES "public"."strategy"("id")
);

ALTER TABLE public.bot ENABLE ROW LEVEL SECURITY;

CREATE INDEX IF NOT EXISTS idx_bot_api_key_id ON public.bot USING btree (api_key_id);

CREATE INDEX IF NOT EXISTS idx_bot_crypto_id ON public.bot USING btree (crypto_id);

CREATE INDEX IF NOT EXISTS idx_bot_strategy_id ON public.bot USING btree (strategy_id);

CREATE OR REPLACE TRIGGER "handle_bot_updated_at" BEFORE UPDATE ON "public"."bot" FOR EACH ROW EXECUTE FUNCTION "extensions"."moddatetime"('updated_at');

--------------------------------------------------------
-- Create trade table
--------------------------------------------------------
CREATE TABLE public.trade (
    "id" integer generated by default as identity not null,
    "buy_timestamp" timestamp with time zone NOT NULL DEFAULT now(),
    "sell_timestamp" timestamp with time zone,
    "buy_price" numeric,
    "sell_price" numeric,
    "nb_token" numeric,
    "status" TEXT NOT NULL DEFAULT 'open',
    "buy_fees" numeric,
    "sell_fees" numeric,
    "currency" TEXT NOT NULL DEFAULT 'USDC',
    "bot_id" INTEGER NOT NULL,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone null,
    CONSTRAINT "trade_pkey" PRIMARY KEY ("id"),
    CONSTRAINT "trade_bot_id_fkey" FOREIGN KEY ("bot_id") REFERENCES "public"."bot"("id")
);

ALTER TABLE public.trade ENABLE ROW LEVEL SECURITY;

CREATE INDEX IF NOT EXISTS idx_trade_bot_id ON public.trade USING btree (bot_id);

CREATE OR REPLACE TRIGGER "handle_trade_updated_at" BEFORE UPDATE ON "public"."trade" FOR EACH ROW EXECUTE FUNCTION "extensions"."moddatetime"('updated_at');

--------------------------------------------------------
-- Create transaction table
--------------------------------------------------------
CREATE TABLE public.transaction (
    "id" integer generated by default as identity not null,
    "idx" TEXT NOT NULL,
    "from_address" TEXT,
    "to_address" TEXT,
    "from_label" TEXT,
    "to_label" TEXT,
    "fees" numeric,
    "value" numeric,
    "status" INTEGER,
    "type" TEXT,
    "timestamp" timestamp with time zone NOT NULL DEFAULT now(),
    "price" numeric,
    "wallet_id" INTEGER NOT NULL,
    "crypto_id" INTEGER NOT NULL,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone null,
    CONSTRAINT "transaction_pkey" PRIMARY KEY ("id"),
    CONSTRAINT "transaction_wallet_id_fkey" FOREIGN KEY ("wallet_id") REFERENCES "public"."wallet"("id"),
    CONSTRAINT "transaction_crypto_id_fkey" FOREIGN KEY ("crypto_id") REFERENCES "public"."crypto"("id")
);

ALTER TABLE public.transaction ENABLE ROW LEVEL SECURITY;

CREATE INDEX IF NOT EXISTS idx_transaction_wallet_id ON public.transaction USING btree (wallet_id);

CREATE INDEX IF NOT EXISTS idx_transaction_crypto_id ON public.transaction USING btree (crypto_id);

CREATE OR REPLACE TRIGGER "handle_transaction_updated_at" BEFORE UPDATE ON "public"."transaction" FOR EACH ROW EXECUTE FUNCTION "extensions"."moddatetime"('updated_at');

COMMIT;